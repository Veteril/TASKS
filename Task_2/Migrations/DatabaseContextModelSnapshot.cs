// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Task_2.Database;

#nullable disable

namespace Task_2.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Task_2.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClassNumber")
                        .HasColumnType("int");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Task_2.Models.DataRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<double>("ClosingBalanceAsset")
                        .HasColumnType("float");

                    b.Property<double>("ClosingBalanceLiability")
                        .HasColumnType("float");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OpeningBalanceAsset")
                        .HasColumnType("float");

                    b.Property<double>("OpeningBalanceLiability")
                        .HasColumnType("float");

                    b.Property<string>("RowId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TurnOverCredit")
                        .HasColumnType("float");

                    b.Property<double>("TurnOverDebit")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Rows");
                });

            modelBuilder.Entity("Task_2.Models.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Task_2.Models.Class", b =>
                {
                    b.HasOne("Task_2.Models.File", "File")
                        .WithMany("Classes")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("Task_2.Models.DataRow", b =>
                {
                    b.HasOne("Task_2.Models.Class", "Class")
                        .WithMany("DataRows")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Task_2.Models.Class", b =>
                {
                    b.Navigation("DataRows");
                });

            modelBuilder.Entity("Task_2.Models.File", b =>
                {
                    b.Navigation("Classes");
                });
#pragma warning restore 612, 618
        }
    }
}
